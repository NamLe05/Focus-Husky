import {app, BrowserWindow, ipcMain} from 'electron';
import TypedDatastore from './services/db';
import {TaskState} from './tasks/model';
import {PetState} from './pet/model';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// eslint-disable-next-line n/no-extraneous-require
const axios = require('axios');
const CANVAS_BASE_URL = 'https://canvas.uw.edu';

const shell = require('electron').shell;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Module-scoped mainWindow so we can reference it across handlers
let mainWindow: BrowserWindow | null = null;

const createWindow = (): void => {
  if (mainWindow) {
    // If window already exists, just focus it
    if (mainWindow.isMinimized()) mainWindow.restore();
    mainWindow.focus();
    return;
  }

  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 1920,
    width: 1080,
    show: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  mainWindow.webContents.session.webRequest.onHeadersReceived(
    (details, callback) => {
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          'Content-Security-Policy': '',
        },
      });
    },
  );

  mainWindow.webContents.setWindowOpenHandler(edata => {
    shell.openExternal(edata.url);
    return {action: 'deny'};
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY); // eslint-disable-line

  // Maximize the screen
  mainWindow.once('ready-to-show', () => {
    mainWindow.show();
    mainWindow.maximize();
  });

  mainWindow.on('closed', () => {
    mainWindow = null;
  });
};

// Handler to open or focus the main window and then navigate home
ipcMain.handle('open-or-focus-main-home', async () => {
  // If mainWindow exists, focus or restore it
  if (mainWindow && !mainWindow.isDestroyed()) {
    if (mainWindow.isMinimized()) mainWindow.restore();
    mainWindow.focus();
  } else {
    // Otherwise, create it from scratch
    await createWindow();
  }

  // Tell the main-window renderer to go home
  // If the page isnâ€™t loaded yet, you can wait for 'did-finish-load':
  if (mainWindow) {
    if (!mainWindow.webContents.isLoadingMainFrame()) {
      mainWindow.webContents.send('navigate-home');
    } else {
      mainWindow.webContents.once('did-finish-load', () => {
        mainWindow.webContents.send('navigate-home');
      });
    }
  }
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.handle('getCanvasAssignments', async (e, userToken) => {
  console.log('invoking the API');
  // Canvas will maintain an updated state of tasks for up to 3 months (~1 quarter)
  const startDate = new Date();
  startDate.setMonth(startDate.getMonth() - 3);

  // First, we need to query all the planner items.
  const api = `${CANVAS_BASE_URL}/api/v1/planner/items`;

  // We need to handle a paginated request (1000 per page)
  if (!userToken) {
    throw new Error('Not authenticated');
  }

  try {
    console.log('Fetching courses from Canvas...');
    console.log(`Using domain: ${CANVAS_BASE_URL}`);
    console.log(`Token available: ${!!userToken}`);

    // Get courses
    console.log(userToken);
    const coursesResponse = await axios.get(
      `${CANVAS_BASE_URL}/api/v1/courses`,
      {
        headers: {Authorization: `Bearer ${userToken}`},
        params: {enrollment_state: 'active', include: ['term', 'favorites']},
      },
    );

    // Filter to only include "favorite" courses
    const favoriteCourses = coursesResponse.data.filter(
      (c: any) => c.is_favorite,
    );

    // Get assignments for each course
    console.log('Fetching Canvas planner items...');
    const plannerRequest = await axios.get(api, {
      headers: {Authorization: `Bearer ${userToken}`},
      params: {
        per_page: 1000,
        start_date: startDate.toISOString().split('T')[0],
      },
    });

    // Check if there are any assignments or planner items with due dates
    // Only include items from favorite and current courses.
    const finalTaskList = plannerRequest.data.filter(
      (a: any) =>
        a.plannable_type === 'planner_note' ||
        (a.plannable_type === 'assignment' &&
          favoriteCourses.some((c: any) => a.course_id === c.id)),
    );

    // Return all planner items
    return [favoriteCourses, finalTaskList];
  } catch (error) {
    console.error('Error fetching data from Canvas:', error.message);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', JSON.stringify(error.response.data));
    }
    throw new Error(`Failed to fetch assignments: ${error.message}`);
  }
});

declare const POMODORO_WINDOW_WEBPACK_ENTRY: string;
declare const POMODORO_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let pomodoroWindow: BrowserWindow | null = null;

const createPomodoroWindow = async (): Promise<void> => {
  if (pomodoroWindow) {
    pomodoroWindow.focus();
    return;
  }

  pomodoroWindow = new BrowserWindow({
    width: 350,
    height: 220,
    title: 'Pomodoro Timer',
    frame: false, // No OS chrome
    transparent: true, // See-through background
    resizable: false, // Optional: prevent resize
    hasShadow: false,
    alwaysOnTop: true,
    titleBarStyle: 'hidden',
    autoHideMenuBar: true,
    kiosk: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  await pomodoroWindow.loadURL(POMODORO_WINDOW_WEBPACK_ENTRY);
  pomodoroWindow.on('closed', () => {
    pomodoroWindow = null;
  });
};

declare const PET_WINDOW_WEBPACK_ENTRY: string;
declare const PET_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let petWindow: BrowserWindow | null = null;

const createPetWindow = async (): Promise<void> => {
  if (petWindow) {
    petWindow.focus();
    return;
  }

  petWindow = new BrowserWindow({
    width: 120,
    height: 350,
    title: 'Pet Interaction',
    frame: false,
    transparent: true,
    resizable: false,
    hasShadow: false,
    alwaysOnTop: true,
    movable: true,
    titleBarStyle: 'hidden',
    webPreferences: {
      preload: PET_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  await petWindow.loadURL(PET_WINDOW_WEBPACK_ENTRY);
  petWindow.on('closed', () => {
    petWindow = null;
  });
};

ipcMain.on('open-pomodoro-window', async () => {
  await createPomodoroWindow();
});

ipcMain.on('open-pet-window', async () => {
  await createPetWindow();
});

const getFilePath = (filename: string) =>
  app.isPackaged ? `${app.getAppPath()}/data/${filename}` : `data/${filename}`;

// Database API
type DbInsertConfig =
  | {filename: 'tasks.db'; document: TaskState}
  | {filename: 'pets.db'; document: PetState};

type DbUpdateConfig =
  | {
      filename: 'tasks.db';
      query: Partial<TaskState & {_id: string}>;
      update: Partial<TaskState> | {$set: Partial<TaskState>};
    }
  | {
      filename: 'pets.db';
      query: Partial<PetState & {_id: string}>;
      update: Partial<PetState> | {$set: Partial<PetState>};
    };

type DbRemoveConfig =
  | {
      filename: 'tasks.db';
      query: Partial<TaskState> & {_id: string};
    }
  | {
      filename: 'pets.db';
      query: Partial<PetState> & {_id: string};
    };

const databases: {[filename: string]: TypedDatastore<unknown>} = {};

const getDbInstance = (filename: string) => {
  if (!(filename in databases)) {
    if (filename === 'tasks.db') {
      databases[filename] = new TypedDatastore<TaskState>(
        getFilePath(filename),
      );
    } else if (filename === 'pets.db') {
      databases[filename] = new TypedDatastore<TaskState>(
        getFilePath(filename),
      );
    }
  }
  return databases[filename];
};

ipcMain.on('insertDoc', async (e, {filename, document}: DbInsertConfig) => {
  await getDbInstance(filename).insertDoc(document);
});

ipcMain.handle('getAllDocs', async (e, filename: string) => {
  return await getDbInstance(filename).findDoc({});
});

ipcMain.on(
  'updateDoc',
  async (e, {filename, query, update}: DbUpdateConfig) => {
    return await getDbInstance(filename).updateDoc(query, update);
  },
);

ipcMain.on('deleteDoc', async (e, {filename, query}: DbRemoveConfig) => {
  return await getDbInstance(filename).removeDoc(query);
});
